<!DOCTYPE html>
<html lang="en">
<head>
 <title>OSM Destination Signs</title>
 <link rel="stylesheet" type="text/css" href="../code/style.css">
 <script src="../code/scripts.js" type="text/javascript"></script>
 <script src="../../destinations/code/svgclean.js" type="text/javascript"></script>

 <meta  charset="UTF-8"/>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.1.0/dist/leaflet.css"
  integrity="sha512-wcw6ts8Anuw10Mzh9Ytw4pylW8+NAD4ch3lqm9lzAsTxg0GFeJgoAtxuCLREZSC5lUXdVyo/7yfsqFjQ4S+aKw=="
  crossorigin=""/>
<script src="https://unpkg.com/leaflet@1.1.0/dist/leaflet.js"
  integrity="sha512-mNqn2Wg7tSToJhvHcqfzLMU6J4mkOImSPTxVZAdo+lcPlk+GhZmYgACEe0x35K7YzW1zJ7XyJV/TT1MrdXvMcA=="
  crossorigin=""></script>
<!--  <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" /> -->
 <link rel="stylesheet" type="text/css" href="../example/website.css">
<!--  <script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script> -->
 <script src="../example/leaflet-layerjson.js"></script>
 <script src="../example/leaflet-permalink.js"></script>
 <base target="_blank">
</head>
<body class="mappage">
<div id="header">
<h1>Destination Signs</h1>
<p><strong>This tool shows the content of relations with "type=destination_sign", "direction_*" tags on 
guideposts as well as "destination" tags on highways and guideposts.</strong>
<br>Please enter an Id of an intersection node or a guidepost - or do it the simple way and select a marker from the map.

<br>The code of this page is available on <a href="https://github.com/mueschel/OsmDestinationSigns">Github</a>.
<br>The code for signs on ways (green markers) is available on <a href="https://github.com/mueschel/OsmDestinationToSVG">Github</a>.

<div class="config">
<h3>Configuration</h3>
<div><form action="" >
  <label title="Id of an intersection or guidepost node">Node Id:
    <input type="text" name="nodeid"  onChange="updatelink('node');getsign(document.getElementsByName('nodeid')[0].value);"></label>
  <br><label title="Id of a way with destination tags">Way Id:
    <input type="text" name="wayid" onChange="updatelink('way');getsignway(document.getElementsByName('wayid')[0].value);"></label>
  <br><label title="Some Examples">Some (interesting) examples:
    <select name="nodeid" onChange="getsign(this.value);">
      <option value="3731895314">3731895314 - bi-lingual
      <option value="1938162531">1938162531
      <option value="4313151794">4313151794 - node as 'to'
      <option value="3719751885">3719751885 - node as 'to', in middle of way
      <option value="3721184276">3721184276 - ref from relation of ways
      <option value="2399730302">2399730302 - with symbol and colour
      <option value="3033139388">3033139388 - bicycle with colour but missing intersection
      <option value="2400684815">2400684815 - list of destinations and times
      <option value="3669231450">3669231450 - coloured arrows
      <option value="3740138783">3740138783
      <option value="3908107497">3908107497 - an awful lot of entries
      <option value="3700303286">3700303286 - with image and operator
      <option value="3906804369">3906804369 - with Mapillary
      <option value="1670509673">1670509673 - from way, no intersection
      <option value="3314100013">3314100013 - at a motorway
      <option value="3733676910">3733676910 - way part of a named route
      <option value="521744">521744 - destination:lanes would be better
      <option value="3904774546">3904774546 - long relation names
      <option value="521648">521648 - need to find right to way
      <option value="3718993777">3718993777 - 2 'to' mapping error
      <option value="4015458129">4015458129 - in a roundabout
      <option value="33606838">33606838 - ambiguous
      <option value="275664964">275664964 - with various from's
      <option value="4554236964">4554236964 - with many from; time and distance
    </select></label>
    Country <select name="country" onChange="updatelink()"><option value="DE">Germany<option value="AT">Austria<option value="FR">France<option value="IT">Italy<option value="PT">Portugal<option value="SR">Serbia</select><br> 

    <input type="checkbox" name="namedroutes" checked="checked" onChange="updatelink()"> Add names of routes</input>
    <br><input type="checkbox" name="fromarrow" checked="checked" onChange="updatelink()"> Show hollow arrows as seen from sign</input>

    <br><input type="checkbox" name="include_sgn" checked="checked" onChange="togglesigns();updatelink()"> destination_signs</input>
    <br><input type="checkbox" name="include_way" checked="checked" onChange="toggleways();updatelink()"> Show 'destination' on ways</input>
    <br><a id="permanode" href="">Link to this node</a>
</form>
</div>
</div>
<div style="margin-bottom:50px;margin-top:10px;clear:both;width:420px;height:1px;border-bottom:1px solid black;">
<p><div id="map"></div>
<div id="container">&nbsp;</div>
<div id="key">
<br><span style="font-size:220%">&#10137;</span> cardinal direction
<br><span style="font-size:220%">&#x21e8;</span> direction as on sign
<br><span style="font-size:220%">&#x21e2;</span> approximate direction
<br><img src="../code/marker-icon.png" style="vertical-align:middle">destination_sign relation
<br><img src="../code/marker-icon2.png" style="vertical-align:middle">direction_* tags
<br><img src="../code/marker-icon3.png" style="vertical-align:middle">destination on nodes
<br><img src="../code/marker-icon4.png" style="vertical-align:middle">destination on ways

</div>

</body>
<script type="text/javascript">
//var endpoint = "http://overpass-api.de/api/interpreter";
//var endpoint = "https://overpass.kumi.systems/api/interpreter";
var endpoint = "https://osm.mueschelsoft.de/overpass/";

var currentType = 'node';
var map = L.map('map').setView([46.72539, 11.42286], 14);

L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png',
  { attribution: 'Map &copy; <a href="https://www.openstreetmap.org">OpenStreetMap</a>' }).addTo(map);

map.addControl(new L.Control.Permalink({text: 'Permalink'}));

var hash = (location.hash ||'').replace(/^#/,'').split('&');
var namedroutes = true;
var fromarrow = false;
var include_sgn = true;
var include_way = true;
var currentType = 'node';
var country = '';
var node = 0;
var way = 0;

for(i=0; i<hash.length; i++ ){
  var t = hash[i].split('=');
  if (t[0]=='node') {
    node = t[1];
    currentType = 'node';
    }
  if (t[0]=='way') {
    way = t[1];
    currentType = 'way';
    }
  if (t[0]=='country') {
    country = t[1];
    }
  if (t[0]=="namedroutes"){
    if ( t[1]==1 ) namedroutes = true;
    if ( t[1]==0 ) namedroutes = false;
    }
  if (t[0]=="fromarrow"){
    if ( t[1]==1 ) fromarrow = true;
    if ( t[1]==0 ) fromarrow = false;
    }
  if (t[0]=="include_sgn"){
    if ( t[1]==1 ) include_sgn = true;
    if ( t[1]==0 ) include_sgn = false;
    }
  if (t[0]=="include_way"){
    if ( t[1]==1 ) include_way = true;
    if ( t[1]==0 ) include_way = false;
    }
  }
  
document.getElementsByName('namedroutes')[0].checked = namedroutes;
document.getElementsByName('fromarrow')[0].checked = fromarrow;
document.getElementsByName('include_sgn')[0].checked = include_sgn;
document.getElementsByName('include_way')[0].checked = include_way;
document.getElementsByName('country')[0].value = country;


if(node) {     getsign(node); } 
if(way)  {     getsignway(way); } 

 
var waylayer; var signlayer;
if (document.getElementsByName("include_sgn")[0].checked)  
  addsigns();
  
if (document.getElementsByName("include_way")[0].checked)  
  addways();
     
    
function togglesigns() {
  if (document.getElementsByName("include_sgn")[0].checked == 0)
    map.removeLayer(signlayer);
  else
    addsigns();
  }
    
function toggleways() {
  if (document.getElementsByName("include_way")[0].checked == 0)
    map.removeLayer(waylayer);
  else
    addways();
  }

function addsigns() {
  signlayer = L.layerGroup();  
  map.addLayer(signlayer);
L.layerJSON({
  url: endpoint+'?data=\
  [out:json][maxsize:4073741824];\
relation["type"="destination_sign"]({lat1},{lon1},{lat2},{lon2})->.all;\
node(r.all:"sign")->.signs;\
.signs out ;\
rel(bn.signs)["type"="destination_sign"]->.c;\
(.all; - .c;)->.all;\
node(r.all:"intersection")->.sects;\
.sects out ;\
rel(bn.sects)["type"="destination_sign"]->.c;\
(.all; - .c;)->.all;\
node(r.all:"via")->.via;\
.via out ;\
rel(bn.via)["type"="destination_sign"]->.c;\
(.all; - .c;)->.all;\
.all out center;\
node[information=guidepost][~"^direction_"~".*"]({lat1},{lon1},{lat2},{lon2})->.f;\
(.f; - .signs;)->.g;\
.g out ;\
node[information=guidepost][destination]({lat1},{lon1},{lat2},{lon2})->.f;\
(.f; - .signs;)->.g;\
.g out ;\
',
  propertyItems: 'elements',
  propertyTitle: 'tags.name',
  propertyLoc: ['lat','lon'],
  filterData: function(d) {
    for (var k in d.elements) {
      if(d.elements[k].center) {
        d.elements[k].lat = d.elements[k].center.lat;
        d.elements[k].lon = d.elements[k].center.lon;
        }
      }
    return d;  
    },
  minShift: 100,
  minZoom: 11,
  attribution: "POI data from overpass API under ODbL",
  updateOutBounds: false,
  buildIcon: function(data, title) {
    if(data.tags && 
       Object.keys(data.tags).some(function(k){ return ~k.indexOf("direction_") })
       ) {
      return new L.Icon({
        iconUrl:'../code/marker-icon2.png',
        iconSize: new L.Point(25, 41),
        iconAnchor: new L.Point(12, 41),
        popupAnchor: new L.Point(0, -41)
        })
      }
    else if(data.tags && 
            data.tags.hasOwnProperty("destination") && 
            data.tags.hasOwnProperty("information")) {
      return new L.Icon({
        iconUrl:'../code/marker-icon3.png',
        iconSize: new L.Point(25, 41),
        iconAnchor: new L.Point(12, 41),
        popupAnchor: new L.Point(0, -41)
        })
      }  
    else if(data.center) {
      return new L.Icon({
        iconUrl:'../code/marker-icon6.png',
        iconSize: new L.Point(25, 41),
        iconAnchor: new L.Point(12, 41),
        popupAnchor: new L.Point(0, -41)
        })
      }        
    else {
      return new L.Icon({
        iconUrl:'../code/marker-icon.png',
        iconSize: new L.Point(25, 41),
        iconAnchor: new L.Point(12, 41),
        popupAnchor: new L.Point(0, -41)
        })
      }

  },
  buildPopup: function(data, marker) {
    if(data.center) {
      o = '<b>Problematic relation <a href="https://osm.org/relation/'+data.id+'">'+data.id+'</a></b>';
      }
    else {
      marker.on('click',function(d) {getsign(d.target.options.id);});
      o = 'Node <a href="https://osm.org/node/'+data.id+'">'+data.id+'</a><br>';
      for (var k in data.tags) {
        if (data.tags.hasOwnProperty(k)) {
          o += "<b>"+k+"</b> = "+data.tags[k]+"<br>";
          }
        }
      }
    return o;
    }
  })
  .addTo(signlayer);  
  
  }
  
function addways() {
  waylayer = L.layerGroup();  
  map.addLayer(waylayer);
  
  L.layerJSON({
    url: endpoint+'?data=\
    [out:json];\
  way[highway][~"^destination"~"."]({lat1},{lon1},{lat2},{lon2});\
  out tags center 1000;\
  ',
    propertyItems: 'elements',
    propertyTitle: 'tags.name',
    propertyLoc: ['center.lat','center.lon'],
    minShift: 100,
    minZoom: 11,
    attribution: "POI data from overpass API under ODbL",
    updateOutBounds: false,
    buildIcon: function(data, title) {
      if(data.tags && 
       (Object.keys(data.tags).some(function(k){ return ~k.indexOf(":lanes")}) ||
       Object.keys(data.tags).some(function(k){ return ~k.indexOf("turn")}))
       ) {
        return new L.Icon({
          iconUrl:'../code/marker-icon4.png',
          iconSize: new L.Point(25, 41),
          iconAnchor: new L.Point(12, 41),
          popupAnchor: new L.Point(0, -41)
          })       
        }
      else { 
        return new L.Icon({
          iconUrl:'../code/marker-icon5.png',
          iconSize: new L.Point(25, 41),
          iconAnchor: new L.Point(12, 41),
          popupAnchor: new L.Point(0, -41)
          })
        }
      },

    buildPopup: function(data, marker) {
      marker.on('click',function(d) {getsvgsign(d.target.options);});
      o = 'Way <a href="https://osm.org/way/'+data.id+'">'+data.id+'</a><br>';
      for (var k in data.tags) {
        if (data.tags.hasOwnProperty(k)) {
          o += "<b>"+k+"</b> = "+data.tags[k]+"<br>";
          }
        }
      return o;
      }
    })

    .addTo(waylayer);  
  }
  
function getsignway(way) {
  var url = endpoint;
  var data = "data=[out:json];way("+way+");out center;";
  getData(url,'',getwaymove,data);
}

function getwaymove(e) {
  try {
    data = JSON.parse(e);
//     map.panTo(new L.LatLng(data.elements[0].center.lat, data.elements[0].center.lon));
    map.setView([data.elements[0].center.lat, data.elements[0].center.lon], 16);
    loaddata_i(data.elements[0]);
    }
  catch {};
  }

  
  
</script>

</html>
